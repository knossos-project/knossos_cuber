[Project]
; exp_name : str
;   Arbitrary experiment name identifier
;
; source_path : str
;   Path to raw image input data
;
; target_path : str
;   Path for cube data output
;
exp_name=knossos_cuber_project
source_path=/source/path/
target_path=/target/path/


[Processing]
; buffer_size_in_cubes : int
;   How many cubes will be used. Ideally, this number should be greater
;   than the number of cubes in a single z-layer of cubes.
;
; num_donwsampling_cores : int
; Number of CPU cores to use for downsampling.
;
; num_io_threads : int
;   Use more than cores available; 20 is good if you're on a local RAID
;   array, higher numbers might help if you read / write from NFS.
;
; perform_downsampling : bool
;   Whether to generate downsampled cube sets.
;
;
; perform_mag1_cubing : bool
;   Whether to generate mag1 cubes from 2D images
;
; cube_edge_len : int
;   Edge length for the cubes, everything except for 128 is untested.
;
; skip_already_cubed_layers : bool
;   Skip layers / cubes that contain already cubes or are already
;   existent. Useful to recover from long runs that were killed.
;
buffer_size_in_cubes=1000
buffer_size_in_cubes_downsampling=256
num_downsampling_cores=16
num_io_threads=16
perform_mag1_cubing=True
perform_downsampling=True
cube_edge_len=128
skip_already_cubed_layers=False
use_simple_image_open=True
compress_source_downsampling_mag=False
first_downsampling_mag=2
keep_z_until_mag=5


[Dataset]
; source_dims : length 2 list
;   Input image dimensions. Required for raw images, otherwise determined
;   directly from input images.
;
; source_dtype : numpy datatype
;   Input image pixel data type, required only for raw. E.g. numpy.uint8.
;
; source_format : str
;   Whatever image format PIL can read in, or `raw' for faster cubing.
;   If possible, should be identical to the file name extension of
;   input data.
;   NOTE: RAW files are currently not supported.
;
; scaling : 3-tuple of float
;   Voxel scaling, physical units per voxel
;
; boundaries : 3-tuple of int
;   Edge length of whole dataset, only required if not starting
;   from 2D images.
;
; mags_to_gen : int
;   Generates log_2(mags_to_gen) downsampled 3D pyramids levels
;
; same_knossos_as_tif_stack_xy_orientation : bool
;   Whether to swap axes.  If yes, performs costly xy axes swap;
;   this swap takes currently about as long as reading in each
;   image file.
;
source_dims=(2048,2048,2048)
source_dtype=np.uint8
source_format=tif
scaling=(1.0, 1.0, 1.0)
boundaries=(2048,2048,2048)
mag_names=pyknossos
mags_to_gen=2**20
invert=False


[Compression]
; perform_compression : bool
;   Whether to generate compressed cubes, important for web streaming.
;
; compression_algo : str
;   'jpeg' (JPEG) or 'j2k' (JPEG2000)
;
; out_comp_quality : int
;   0-100 for jpg (100 is best), 1-10 for j2k (1 == lossles?)
;
; pre_comp_gauss_filter : float
;   Gaussian filter before compression to reduce artefacts, this
;   really helps a lot for noisy data. Do NOT use it for
;   near-noise-free data (I would say SNR > 10).
;
; open_jpeg_bin_path : str
;   Path to JPEG2000 compression executable, only needed when
;   using JPEG2000.
;
; num_compression_cores : int
;
perform_compression=False
compression_algo=png,jpg
out_comp_quality=75
#pre_comp_gauss_filter=0.5
pre_comp_gauss_filter=0
open_jpeg_bin_path
num_compression_cores=16
